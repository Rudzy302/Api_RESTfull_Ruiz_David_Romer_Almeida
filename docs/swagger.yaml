openapi: 3.0.0
info:
 title: API TIENDA VIRTUAL -TALER FINAL
 description: API RESTful para gestionar usuarios, perfiles, roles y pagos
 version: 1.0.0

components:
 securitySchemes:
   bearerAuth:
     type: http
     scheme: bearer
     bearerFormat: JWT

 schemas:
   User:
     type: object
     properties:
       id:
         type: integer
       email:
         type: string
       password:
         type: string
       createdAt:
         type: string
         format: date-time
       updatedAt:
         type: string
         format: date-time

   UserProfile:
     type: object
     properties:
       firstName:
         type: string
       middleName:
         type: string
       lastName:
         type: string
       phone:
         type: string
       email:
         type: string

   Role:
     type: object
     properties:
       id:
         type: integer
       roleName:
         type: string
       createdAt:
         type: string
         format: date-time
       updatedAt:
         type: string
         format: date-time

   PaymentMethod:
     type: object
     properties:
       id:
         type: integer
       methodName:
         type: string
       createdAt:
         type: string
         format: date-time
       updatedAt:
         type: string
         format: date-time

   PaymentGateway:
     type: object
     properties:
       id:
         type: integer
       idPaymentMethod:
         type: integer
       gateway:
         type: string
       createdAt:
         type: string
         format: date-time
       updatedAt:
         type: string
         format: date-time

   PaymentGatewayLocation:
     type: object
     properties:
       id:
         type: integer
       location:
         type: string
       idPaymentGateway:
         type: integer
       createdAt:
         type: string
         format: date-time
       updatedAt:
         type: string
         format: date-time

paths:
 /api/users/register:
   post:
     summary: Registrar un nuevo usuario
     requestBody:
       required: true
       content:
         application/json:
           schema:
             type: object
             required:
               - firstName
               - lastName
               - email
               - password
             properties:
               firstName:
                 type: string
               middleName:
                 type: string
               lastName:
                 type: string
               phone:
                 type: string
                 pattern: '^\d{10}$'
               email:
                 type: string
                 format: email
               password:
                 type: string
                 minLength: 6
     responses:
       '201':
         description: Usuario registrado exitosamente
         content:
           application/json:
             schema:
               type: object
               properties:
                 message:
                   type: string
                   example: "Usuario registrado"
                 user:
                   type: object
                   properties:
                     userId:
                       type: integer
                     peopleId:
                       type: integer
       '400':
         description: Error en los datos de entrada
         content:
           application/json:
             schema:
               type: object
               properties:
                 error:
                   type: string
                   example: "El usuario ya existe"

 /api/users/login:
   post:
     summary: Iniciar sesión
     requestBody:
       required: true
       content:
         application/json:
           schema:
             type: object
             required:
               - email
               - password
             properties:
               email:
                 type: string
                 format: email
               password:
                 type: string
     responses:
       '200':
         description: Login exitoso
         content:
           application/json:
             schema:
               type: object
               properties:
                 token:
                   type: string
       '400':
         description: Credenciales inválidas
         content:
           application/json:
             schema:
               type: object
               properties:
                 error:
                   type: string
                   example: "Usuario no encontrado"

 /api/users/profile:
   get:
     summary: Obtener perfil del usuario
     security:
       - bearerAuth: []
     responses:
       '200':
         description: Perfil obtenido exitosamente
         content:
           application/json:
             schema:
               type: object
               properties:
                 success:
                   type: boolean
                 data:
                   type: object
                   properties:
                     user:
                       $ref: '#/components/schemas/UserProfile'
       '401':
         description: No autorizado
       '400':
         description: Error al obtener el perfil

 /api/users/profile/{userId}:
   put:
     summary: Actualizar perfil de usuario
     security:
       - bearerAuth: []
     parameters:
       - in: path
         name: userId
         required: true
         schema:
           type: integer
     requestBody:
       required: true
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/UserProfile'
     responses:
       '200':
         description: Perfil actualizado exitosamente
       '400':
         description: Error en la actualización
       '401':
         description: No autorizado

   delete:
     summary: Eliminar perfil de usuario
     security:
       - bearerAuth: []
     parameters:
       - in: path
         name: userId
         required: true
         schema:
           type: integer
     responses:
       '200':
         description: Perfil eliminado exitosamente
       '400':
         description: Error en la eliminación
       '401':
         description: No autorizado

 /api/roles:
   get:
     summary: Obtener todos los roles
     responses:
       '200':
         description: Lista de roles obtenida exitosamente
         content:
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/Role'
   
   post:
     summary: Crear nuevo rol
     security:
       - bearerAuth: []
     requestBody:
       required: true
       content:
         application/json:
           schema:
             type: object
             required:
               - roleName
             properties:
               roleName:
                 type: string
     responses:
       '201':
         description: Rol creado exitosamente
       '400':
         description: Error en la creación del rol
       '401':
         description: No autorizado

 /api/users/{userId}/roles:
   get:
     summary: Obtener roles de un usuario
     security:
       - bearerAuth: []
     parameters:
       - in: path
         name: userId
         required: true
         schema:
           type: integer
     responses:
       '200':
         description: Roles del usuario obtenidos exitosamente
       '401':
         description: No autorizado

   put:
     summary: Actualizar roles de un usuario
     security:
       - bearerAuth: []
     parameters:
       - in: path
         name: userId
         required: true
         schema:
           type: integer
     requestBody:
       required: true
       content:
         application/json:
           schema:
             type: object
             properties:
               roleIds:
                 type: array
                 items:
                   type: integer
     responses:
       '200':
         description: Roles actualizados exitosamente
       '400':
         description: Error en la actualización
       '401':
         description: No autorizado

 /api/payment-methods:
   post:
     summary: Crear método de pago
     security:
       - bearerAuth: []
     requestBody:
       required: true
       content:
         application/json:
           schema:
             type: object
             required:
               - methodName
             properties:
               methodName:
                 type: string
     responses:
       '201':
         description: Método de pago creado exitosamente
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/PaymentMethod'
       '400':
         description: Error en la creación
       '401':
         description: No autorizado

   get:
     summary: Obtener todos los métodos de pago
     responses:
       '200':
         description: Lista de métodos obtenida exitosamente
         content:
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/PaymentMethod'

 /api/payment-methods/{id}:
   get:
     summary: Obtener método de pago por ID
     parameters:
       - in: path
         name: id
         required: true
         schema:
           type: integer
     responses:
       '200':
         description: Método de pago obtenido exitosamente
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/PaymentMethod'
       '404':
         description: Método de pago no encontrado

   put:
     summary: Actualizar método de pago
     security:
       - bearerAuth: []
     parameters:
       - in: path
         name: id
         required: true
         schema:
           type: integer
     requestBody:
       required: true
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/PaymentMethod'
     responses:
       '200':
         description: Método de pago actualizado exitosamente
       '400':
         description: Error en la actualización
       '401':
         description: No autorizado

   delete:
     summary: Eliminar método de pago
     security:
       - bearerAuth: []
     parameters:
       - in: path
         name: id
         required: true
         schema:
           type: integer
     responses:
       '204':
         description: Método de pago eliminado exitosamente
       '401':
         description: No autorizado
       '404':
         description: Método de pago no encontrado

 /api/payments/filter:
   get:
     summary: Obtener pagos con filtros
     parameters:
       - in: query
         name: status
         schema:
           type: string
           enum: [PENDING, COMPLETED, FAILED]
       - in: query
         name: amount
         schema:
           type: number
       - in: query
         name: date
         schema:
           type: string
           format: date
     responses:
       '200':
         description: Pagos filtrados obtenidos exitosamente

 /api/payments/location/{locationId}/method/{methodId}:
   get:
     summary: Obtener pagos por ubicación y método
     parameters:
       - in: path
         name: locationId
         required: true
         schema:
           type: integer
       - in: path
         name: methodId
         required: true
         schema:
           type: integer
     responses:
       '200':
         description: Pagos obtenidos exitosamente

 /api/payments/pending/location/{locationId}:
   get:
     summary: Obtener pagos pendientes por ubicación
     parameters:
       - in: path
         name: locationId
         required: true
         schema:
           type: integer
     responses:
       '200':
         description: Pagos pendientes obtenidos exitosamente

 /api/payments/{id}/status:
   put:
     summary: Actualizar estado de pago
     security:
       - bearerAuth: []
     parameters:
       - in: path
         name: id
         required: true
         schema:
           type: integer
     requestBody:
       required: true
       content:
         application/json:
           schema:
             type: object
             required:
               - status
             properties:
               status:
                 type: string
                 enum: [PENDING, COMPLETED, FAILED]
     responses:
       '200':
         description: Estado actualizado exitosamente
       '400':
         description: Error en la actualización
       '401':
         description: No autorizado

 /api/payments/count/status:
   get:
     summary: Obtener número de pagos por estado
     responses:
       '200':
         description: Conteo obtenido exitosamente
         content:
           application/json:
             schema:
               type: array
               items:
                 type: object
                 properties:
                   status:
                     type: string
                   count:
                     type: integer

 /api/payments/total/by-method:
   get:
     summary: Obtener total pagado por método
     responses:
       '200':
         description: Totales obtenidos exitosamente
         content:
           application/json:
             schema:
               type: array
               items:
                 type: object
                 properties:
                   methodId:
                     type: integer
                   total:
                     type: number
                   method:
                     $ref: '#/components/schemas/PaymentMethod'
 /api/payment-gateways:
    post:
      summary: Crear gateway de pago
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - idPaymentMethod
                - gateway
              properties:
                idPaymentMethod:
                  type: integer
                gateway:
                  type: string
      responses:
        '201':
          description: Gateway creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentGateway'
        '400':
          description: Error en la creación
        '401':
          description: No autorizado

    get:
      summary: Obtener todos los gateways
      responses:
        '200':
          description: Lista de gateways obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentGateway'

 /api/payment-gateways/{id}:
    get:
      summary: Obtener gateway por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Gateway obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentGateway'
        '404':
          description: Gateway no encontrado

    put:
      summary: Actualizar gateway
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentGateway'
      responses:
        '200':
          description: Gateway actualizado exitosamente
        '400':
          description: Error en la actualización
        '401':
          description: No autorizado

    delete:
      summary: Eliminar gateway
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Gateway eliminado exitosamente
        '401':
          description: No autorizado
        '404':
          description: Gateway no encontrado

 /api/gateway-locations:
    post:
      summary: Crear ubicación de gateway
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - location
                - idPaymentGateway
              properties:
                location:
                  type: string
                idPaymentGateway:
                  type: integer
      responses:
        '201':
          description: Ubicación creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentGatewayLocation'
        '400':
          description: Error en la creación
        '401':
          description: No autorizado

    get:
      summary: Obtener todas las ubicaciones
      responses:
        '200':
          description: Lista de ubicaciones obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentGatewayLocation'

 /api/gateway-locations/{id}:
    get:
      summary: Obtener ubicación por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ubicación obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentGatewayLocation'
        '404':
          description: Ubicación no encontrada

    put:
      summary: Actualizar ubicación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentGatewayLocation'
      responses:
        '200':
          description: Ubicación actualizada exitosamente
        '400':
          description: Error en la actualización
        '401':
          description: No autorizado

    delete:
      summary: Eliminar ubicación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Ubicación eliminada exitosamente
        '401':
          description: No autorizado
        '404':
          description: Ubicación no encontrada